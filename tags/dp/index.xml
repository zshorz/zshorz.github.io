<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>dp - 标签 - kirito&#39;s blog</title>
        <link>https://www.kirito41dd.cn/tags/dp/</link>
        <description>dp - 标签 - kirito&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 06 Dec 2018 11:11:52 &#43;0800</lastBuildDate><atom:link href="https://www.kirito41dd.cn/tags/dp/" rel="self" type="application/rss+xml" /><item>
    <title>轮廓线dp</title>
    <link>https://www.kirito41dd.cn/contour-dp/</link>
    <pubDate>Thu, 06 Dec 2018 11:11:52 &#43;0800</pubDate>
    <author>kirito</author>
    <guid>https://www.kirito41dd.cn/contour-dp/</guid>
    <description><![CDATA[<p>哈尔滨理工大学软件与微电子学院第八届程序设计竞赛同步赛（高年级）</p>
<p>小乐乐搭积木</p>
<p>链接：<a href="https://ac.nowcoder.com/acm/contest/301/B" target="_blank" rel="noopener noreffer">https://ac.nowcoder.com/acm/contest/301/B</a></p>
<p>来源：牛客网</p>
<h2 id="题目描述">题目描述</h2>
<blockquote>
<p>小乐乐想要给自己搭建一个积木城堡。
积木城堡我们假设为n*m的平面矩形。
小乐乐现在手里有 1*2，2*1两种地砖。
小乐乐想知道自己有多少种组合方案。</p>
</blockquote>
<h2 id="输入描述">输入描述:</h2>
<blockquote>
<p>第一行输入整数 n,m。(1&lt;=n,m&lt;=10)</p>
</blockquote>
<h2 id="输出描述">输出描述:</h2>
<blockquote>
<p>输出组合方案数。</p>
</blockquote>
<h2 id="示例">示例</h2>
<p>输入</p>
<blockquote>
<p>2 3</p>
</blockquote>
<p>输出</p>
<blockquote>
<p>3</p>
</blockquote>
<h2 id="ac代码">ac代码</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">dp</span><span class="p">[</span><span class="mi">2</span><span class="p">][(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="mi">11</span><span class="p">)],</span><span class="n">cur</span><span class="p">,</span><span class="n">mask</span><span class="p">;</span>  <span class="c1">//mask 掩码
</span><span class="c1"></span>
<span class="kt">void</span> <span class="nf">update</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="kt">int</span> <span class="n">b</span><span class="p">){</span>
    <span class="n">dp</span><span class="p">[</span><span class="n">cur</span><span class="p">][</span><span class="n">b</span><span class="p">]</span> <span class="o">+=</span> <span class="n">dp</span><span class="p">[</span><span class="n">cur</span><span class="o">^</span><span class="mi">1</span><span class="p">][</span><span class="n">a</span><span class="p">];</span>  <span class="c1">//更新状态方案数
</span><span class="c1"></span><span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="o">&gt;&gt;</span><span class="n">m</span><span class="p">;</span>
    <span class="n">mask</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="n">m</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="c1">//设置掩码
</span><span class="c1"></span>    <span class="n">memset</span><span class="p">(</span><span class="n">dp</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">dp</span><span class="p">));</span>
    <span class="n">cur</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">//滚动数组
</span><span class="c1"></span>    <span class="n">dp</span><span class="p">[</span><span class="n">cur</span><span class="p">][(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="n">m</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">//初始化
</span><span class="c1"></span>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">){</span><span class="c1">//当前处理位置(i,j)
</span><span class="c1"></span>            <span class="n">cur</span> <span class="o">^=</span> <span class="mi">1</span><span class="p">;</span> 
            <span class="n">memset</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">cur</span><span class="p">],</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">cur</span><span class="p">]));</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">k</span> <span class="o">&lt;</span> <span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="n">m</span><span class="p">);</span><span class="n">k</span><span class="o">++</span><span class="p">){</span><span class="c1">//枚举当前状态
</span><span class="c1"></span>
                <span class="c1">//当前和上都放  上有空位就不能往左，也不能不放
</span><span class="c1"></span>                <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="n">k</span><span class="o">&amp;</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="p">))))</span><span class="c1">//不是第一行，且正上方为空
</span><span class="c1"></span>                <span class="p">{</span>
                    <span class="n">update</span><span class="p">(</span><span class="n">k</span><span class="p">,((</span><span class="n">k</span><span class="o">&lt;&lt;</span><span class="mi">1</span><span class="p">)</span><span class="o">^</span><span class="mi">1</span><span class="p">)</span><span class="o">&amp;</span><span class="n">mask</span><span class="p">);</span><span class="c1">//新状态尾部置1
</span><span class="c1"></span>                <span class="p">}</span><span class="k">else</span>
                <span class="p">{</span>
                    <span class="c1">//当前和左放
</span><span class="c1"></span>                    <span class="k">if</span><span class="p">(</span><span class="n">j</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">k</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)))</span><span class="c1">//不是第一列并且左边为空 
</span><span class="c1"></span>                        <span class="n">update</span><span class="p">(</span><span class="n">k</span><span class="p">,((</span><span class="n">k</span><span class="o">&lt;&lt;</span><span class="mi">1</span><span class="p">)</span><span class="o">^</span><span class="mi">3</span><span class="p">)</span><span class="o">&amp;</span><span class="n">mask</span><span class="p">);</span><span class="c1">//新状态尾两个11
</span><span class="c1"></span>
                    <span class="c1">//不放
</span><span class="c1"></span>                    <span class="n">update</span><span class="p">(</span><span class="n">k</span><span class="p">,(</span><span class="n">k</span><span class="o">&lt;&lt;</span><span class="mi">1</span><span class="p">)</span><span class="o">&amp;</span><span class="n">mask</span><span class="p">);</span>
                                        <span class="c1">//掩码是只取低m位作为状态
</span><span class="c1"></span>                <span class="p">}</span>

            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">dp</span><span class="p">[</span><span class="n">cur</span><span class="p">][(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="n">m</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="思路">思路</h2>
<p>轮廓线dp，状压</p>
<p>在这道题中，假设我们有一个 5*5 的格子要填充(如图)，黑色部分不是格子的一部分，只是作为虚拟出来的&quot;顶&quot;。</p>
<p>图1中蓝色部分表示已经填充好的部分；黄色部分是状态压缩表示的状态，已经填充为1，没有为0；红色表示当前处理的位置。</p>
<p>图2中我们用状态01111表示当前的&quot;轮廓&quot;。这个状态的&quot;头&quot;总是在&quot;当前&quot;的上面，这个状态的&quot;尾&quot;大部分时候在&quot;当前&quot;的左边(图4的情况不是)。</p>
<p>图3中，我们&quot;当前&quot;的处理方式只能是填充&quot;当前&quot;和&quot;头&quot;(竖着放)，因为如果我们不这样，上方的空位就无法被填充，会被忽略过去。</p>
<p></p>
<p>图4中，&ldquo;当前&quot;的左边没有格子，而且上方是0，不可能往左放，只能往上放(竖着放)。处理过之后就变成下面的新状态了。</p>
<p>图5中，有两种选择，往左放或者不放。</p>
<p>特别的，如何初始化？</p>
<p>处理第一行的时候，假设上面还有一层，并且都填充了(就是图中黑色部分)，这样就可以像其他位置一样处理。</p>
<p>怎么记录方案数？</p>
<p>每一个状态都是由另一个状态得到的，状态1 —&gt;状态2  ;  状态3 —&gt; 状态2;
可能很多状态都能到状态2，那么状态2的方案数就是： 状态1方案数 + 状态2方案数 + &hellip;</p>
<p>设dp[cur][state]表示cur(当前)位置为state状态的方案数。last为上一个位置。</p>
<p>设 k 表示处理当前位置前的状态(轮廓)，new为处理当前位置后的状态(轮廓)</p>
<p>转移方程有</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">dp</span><span class="p">[</span><span class="n">cur</span><span class="p">][</span><span class="k">new</span><span class="p">]</span> <span class="o">+=</span> <span class="n">dp</span><span class="p">[</span><span class="n">last</span><span class="p">][</span><span class="n">k</span><span class="p">];</span>
</code></pre></td></tr></table>
</div>
</div><p><del>我先去上课 。。。。</del></p>
<p>具体实现可以看代码。</p>
<p>需要注意的几点：</p>
<p>初始化是当上面有一行不存在的，已经填充好的一行</p>
<p><code>dp[cur][(1&lt;&lt;m)-1] = 1</code></p>
<p><code>cur ^= 1</code> 是滚动数组的操作，因为当前位置状态只和它之前位置状态有关</p>
<p>任何时候，上方有空位就不能选择左或者不填。</p>
]]></description>
</item></channel>
</rss>
