<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>default - 分类 - kirito&#39;s blog</title>
        <link>https://www.kirito41dd.cn/categories/default/</link>
        <description>default - 分类 - kirito&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 14 Jul 2021 10:54:48 &#43;0800</lastBuildDate><atom:link href="https://www.kirito41dd.cn/categories/default/" rel="self" type="application/rss+xml" /><item>
    <title>vim装逼要点</title>
    <link>https://www.kirito41dd.cn/zhuangbi-with-vim/</link>
    <pubDate>Wed, 14 Jul 2021 10:54:48 &#43;0800</pubDate>
    <author>kirito</author>
    <guid>https://www.kirito41dd.cn/zhuangbi-with-vim/</guid>
    <description><![CDATA[<p>最近给IDE装了vim插件(ideaVim)，因为觉得写代码时候老是要去按上下左右，效率很低，更主要是low，不够装逼（</p>
<p>但不建议独立使用vim，因为要大量练习才行，和IDE配合使用，可以把重点放在光标移动上，其余功能让IDE来负责。<del>低成本装逼</del></p>
<h2 id="move">move</h2>
<p><code>h</code> <code>j</code> <code>k</code> <code>l</code> - <code>⬅️</code> <code>⬇️</code> <code>⬆️</code> <code>➡️</code></p>
<p><code>w</code>/<code>e</code> - 跳转到下一个词 开头/末尾（按符号或空白分词）</p>
<ul>
<li>助记 word / end</li>
</ul>
<p><code>W</code>/<code>E</code> - 同上（按空白分词）</p>
<p><code>b</code>/<code>ge</code> - 跳转到上一个词 开头/末尾（按符号或空白分词）</p>
<p><code>B</code>/<code>gE</code> - 同上（按空白分词）</p>
<p><code>f&lt;?&gt;</code>/<code>t&lt;?&gt;</code> - 跳转到光标位置后指定 字符上/字符前，不跨行</p>
<ul>
<li>比如 <small>1</small><strong>2</strong><small>345</small>，使用<code>f4</code>后变为 <small>123</small><strong>4</strong><small>5</small>，使用<code>t4</code>则为 <small>12</small><strong>3</strong><small>45</small></li>
<li>助记 find / to，<code>;</code>可以重复执行</li>
</ul>
<p><code>F&lt;?&gt;</code>/<code>T&lt;?&gt;</code> - 跳转到光标位置前指定 字符上/字符前，不夸行</p>
<p><code>%</code> - 当前行如果有括号，移动到它的另一半</p>
<p><code>gg</code>/<code>G</code> - 跳转到文件 开头/结尾</p>
<p><code>&lt;n&gt;gg</code>/<code>&lt;n&gt;G</code> - 跳转到指定行号</p>
<p><code>0</code>/<code>&amp;</code> - 移动到 行开头/末尾</p>
<p><code>^</code>、<code>_</code>/<code>g_</code> - 移动到 行开头/末尾 第一个非空白字符</p>
<p><code>&lt;Ctrl+b&gt;</code>/<code>&lt;Ctrl+f&gt;</code> - 向 上/下 滚一个屏幕</p>
<ul>
<li>助记 back front</li>
</ul>
<p><code>&lt;Ctrl+u&gt;</code>/<code>&lt;Ctrl+d&gt;</code> - 向 上/下 滚半个屏幕</p>
<ul>
<li>助记 up down</li>
</ul>
<p><code>zz</code>/<code>zt</code>/<code>zb</code> - 令光标行处于屏幕 中间/顶部/底部</p>
<ul>
<li>助记 zoom zoom/top/bottom</li>
</ul>
<p><code>&lt;Ctrl+o&gt;</code>/<code>&lt;Ctrl+i&gt;</code> - 光标跳转到jump list的 上一个位置/下一个位置</p>
<ul>
<li>jump list里只记录跳转历史，简单移动光标不会被记录</li>
<li><code>:jump</code>可以查看所有位置</li>
</ul>
<p><code>m&lt;a-zA-Z&gt;</code> - 如<code>ma</code>，标记当前光标位置，并起名为<code>a</code></p>
<ul>
<li>小写的名字只在当前缓冲区可见，大写可以跨缓冲区</li>
<li><code>:marks</code>查看所有标记位置，你也会看到其他非字母的标记</li>
</ul>
<p><code>'&lt;a-zA-Z&gt;</code>/<code> `&lt;a-zA-Z&gt;</code> - 如<code>'a</code>回到<code>a</code>位置所在在行首/<code> `a</code>回到<code>a</code>位置</p>
<ul>
<li>一个是单引号，一个是反引号，<code>''</code>永远返回上一个位置</li>
</ul>
<p><code>zo</code>/<code>zc</code> - 打开折叠/关闭折叠</p>
<p><code>zO</code>/<code>zC</code> - 打开折叠/关闭折叠，递归</p>
<p><code>zM</code>/<code>zR</code> - 关闭/打开 所有折叠</p>
<p><code>gd</code>、<code>&lt;Ctrl+]&gt;</code> - 跳转到定义，<code>&lt;Ctrl+t&gt;</code>返回(用的是tag stack)</p>
<ul>
<li><a href="https://stackoverflow.com/questions/8381415/what-is-the-difference-between-ctrl-t-and-ctrl-o-in-vim" target="_blank" rel="noopener noreffer">Crtl+t 与 Ctrl+o 区别</a></li>
</ul>
<h2 id="编辑">编辑</h2>
<p><code>dd</code>/ <code>&lt;n&gt;dd</code> - 删除当前行 / 删除n行</p>
<p><code>df&lt;?&gt;</code>/<code>dt&lt;?&gt;</code> - 向后删除光标位置到指定字符 / 删除到指定字符前，不跨行</p>
<p><code>dF&lt;?&gt;</code>/<code>dT&lt;?&gt;</code> - 反向，向前删除，同上</p>
<p><code>d$</code>/<code>d^</code> - 从光标删除到 行尾/行开头，用其他位置符也行</p>
<p><code>yy</code>/<code>&lt;n&gt;yy</code> - 复制当前行/复制n行</p>
<p><code>p</code>/<code>P</code> - 粘贴到当前 行后/行前，<code>&lt;n&gt;p</code>就是重复做n次</p>
<p><code>&quot;&lt;reg&gt;y</code>/<code>&quot;&lt;reg&gt;p</code> - 复制到指定寄存器/从指定寄存器粘贴</p>
<ul>
<li>命令模式<code>:reg</code> 可以看各个<a href="https://harttle.land/2016/07/25/vim-registers.html" target="_blank" rel="noopener noreffer">寄存器</a>的内容</li>
<li><code>+</code>寄存器通常与系统剪切板互通</li>
</ul>
<p><code>di&quot;</code>/<code>da&quot;</code> - 删除引号内的内容/连引号一起删，必须单行</p>
<ul>
<li>助记 delete in &quot;&quot; /  delete all &quot;&quot;</li>
<li>还有<code>di(</code>、<code>di{</code>等</li>
</ul>
<p><code>x</code> - 删除光标字符</p>
<p><code>r&lt;?&gt;</code> - 用指定字符替换光标字符</p>
<h2 id="入场">入场</h2>
<p>三连入场，神清气爽。从normal模式进入编辑模式</p>
<p><code>i</code>/<code>a</code> - 在当前光标字符 前/后 插入</p>
<p><code>I</code>/<code>A</code> - 在当前行 开头第一非空白字符前插入/结尾最后一个非空白字符后插入</p>
<p><code>o</code>/<code>O</code> - 当前行 下面/上面 起新行</p>
<p><code>s</code> - 删除当前字符并从该位置插入</p>
]]></description>
</item><item>
    <title>毕业了！！！</title>
    <link>https://www.kirito41dd.cn/bi-ye-leee/</link>
    <pubDate>Mon, 07 Jun 2021 22:05:11 &#43;0800</pubDate>
    <author>kirito</author>
    <guid>https://www.kirito41dd.cn/bi-ye-leee/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://blog-1256556944.file.myqcloud.com/public/henu.png" referrerpolicy="no-referrer">
            </div><p><strong>明德新民 止于至善</strong>
</br>
</br>
感觉校歌是真滴好听！</p>
<center><small>
嵩岳苍苍 河水泱泱，
<p>中原文化悠且长，</p>
<p>济济多士 风雨一堂，</p>
<p>继往开来扬辉光，</p>
<p>四郊多垒 国仇难忘，</p>
<p>民主是式 科学允张，</p>
<p>猗欤吾校永无疆！</p>
<p>猗欤吾校永无疆！
</small></center></p>
<p><meting-js url="https://blog-1256556944.file.myqcloud.com/public/%E6%A0%A1%E6%AD%8C.mp3" name="河南大学校歌" artist="词:嵇文甫 曲:陈梓北" cover="https://blog-1256556944.file.myqcloud.com/public/%E6%A0%A1%E5%BE%BD.webp" theme="#448aff" autoplay="true"></meting-js>
</br>
</br>
从2017到2021，由于疫情的关系整整一年半没有呆在学校，就感觉四年过的非常快。大三下学期在被窝中完成课业，大四还没开学就顶着疫情去北京实习了。四年前的我还是个一无所知的少年，四年后蜕变成了一个一无所知的青年（</p>
<p>学生的身份就此结束了，没有选择继续读研，原因有很多：</p>
<ol>
<li>不会学习，对不感兴趣的课一点都听不进去</li>
<li>喜欢操代码，感觉可以直接工作（事实证明我确实可以</li>
<li>拿过一些奖项，但由于非专业课业成绩差点，还是离保研差了一步</li>
<li>考研是不可能考研的，很反感硕士考题。（看室友备考时来问我的题目，谭浩强年代的C，净考一些没有意义的玩意。</li>
<li>硕士了又怎样（</li>
</ol>
<p>希望以后不会对自己的选择后悔
</br>
</br>
大学四年也成长了很多，感谢我的两任女朋友(<del>前任与现任</del>)
</br>
</br></p>
<p>照片🐎一下我sqdl，<del>网络并非法外之地</del></p>
<center>
<image comment="大礼堂" src="https://blog-1256556944.file.myqcloud.com/public/henu_dalitang_mask.png">
</center>
<center>
<image comment="欧美预备" src="https://blog-1256556944.file.myqcloud.com/public/henu_oumei_mask.png">
</center>
最后，疾风亦有归途🐶
]]></description>
</item><item>
    <title>RSA算法原理</title>
    <link>https://www.kirito41dd.cn/rsa/</link>
    <pubDate>Sun, 31 Jan 2021 13:56:06 &#43;0800</pubDate>
    <author>kirito</author>
    <guid>https://www.kirito41dd.cn/rsa/</guid>
    <description><![CDATA[<h1 id="rsa-算法原理">RSA 算法原理</h1>
<h2 id="数论知识">数论知识</h2>
<p><strong>质数</strong></p>
<p>​	大于1的自然数中，只能被1和它本身的数整除，如 2、3、5、7</p>
<p><strong>互质关系</strong>：</p>
<p>​	如果两个正整数，除了1以外，没有其他公因子，我们就称这两个数是互质关系</p>
<ul>
<li>1与任何数都互质</li>
<li>任意两个质数都互质</li>
<li>质数与小于它的每一个数，都构成互质关系。如5与1、2、3、4都构成互质关系</li>
</ul>
<p><strong>欧拉函数</strong>：</p>
<p>​	任意给定正整数n，请问在小于等于n的正整数之中，有多少个与n构成互质关系？计算这个值的方法就叫做欧拉函数，以符号$\phi(n)$表示</p>
<ul>
<li>$\phi(1)=1$</li>
<li>如果n为质数，则 $\phi(n)=n-1$</li>
<li>如果n是两个互质的整数之积 $n=p_1\times p_2$ 则 $\phi(n)=\phi(p_1)\times \phi(p_2)$</li>
</ul>
<p><strong>欧拉定理</strong>：</p>
<p>​	如果两个正整数a和n互质，则下面的公式成立：
$$
a^{\phi(n)} \equiv 1 \pmod n
$$
<strong>模反元素</strong>：</p>
<p>​	如果两个正整数a和n互质，那么一定可以找到b，使得下面的公式成立：
$$
ab\equiv1\pmod n
$$
​	证明模反元素必然存在，把欧拉定理拆开，$a\times a^{\phi(n)-1} \equiv 1 \pmod n$,</p>
<p>$a^{\phi(n)-1} + kn$ 全都是模反元素</p>
<h2 id="密钥生成步骤">密钥生成步骤</h2>
<p><strong>随机选择两个不相等的质数p和q (越大越好)</strong></p>
<p><strong>计算p和q的乘积</strong> $n=p\times q$</p>
<p><strong>计算n的欧拉函数</strong> $\phi(n)=(p-1)(q-1)$</p>
<p><strong>随机选择一个整数e</strong>, $1&lt;e&lt;\phi(n) 且 e与\phi(n)互质$</p>
<p><strong>计算e对于$\phi(n)$的模反元素d</strong>（知道e和$\phi(n)$就等于知道了模反元素）</p>
<p><strong>公布(n,e)为公钥、(n,d)为私钥</strong></p>
<h2 id="加密和解密">加密和解密</h2>
<p><strong>加密</strong>：公钥(n,e)</p>
<p>加密信息为m, m必须是整数，且m必须小于n</p>
<p>加密就是算出下面式子中的c:
$$
m^e\equiv c \pmod n
$$
即密文 $c=m^e\bmod n$</p>
<p><strong>解密</strong>： 私钥(n,d)</p>
<p>下面的等式一定成立:
$$
c^d \equiv m \pmod n
$$
即明文 $m = c^d\bmod n$</p>
<h2 id="证明">证明</h2>
<div>
$$
为什么\ \ c^d \equiv m \pmod n \ \ \ (1) \\ 
\because m^e\equiv c \pmod n\\
\therefore c = m^e-kn\\
c带入(1)得 \ (m^e - kn)^d \equiv m \pmod n\\
等同与\ m^{ed}\equiv m \pmod n \ \ (2)\\
(比如(a+b)^2 = a^2 + 2ab + b2，只有a得最高项不带b) \\
\because ed \equiv 1 \pmod{\phi(n)}\\
\therefore ed = h\phi(n) +1 \\
将ed带入(2)得 \ m^{h\phi(n)+1} \equiv m \pmod n \ \ \ (3)\\
$$
</div>
证明(1)就是证明（3）：
<p>如果 m 和 n 互质</p>
<div>
$$
由欧拉定理得\ m^{\phi(n)}\equiv 1 \pmod n \ \\
\because m\equiv m \pmod n \\
同余式相乘性质：若a≡b(mod\ n)，c≡d(mod\ n)，则ac≡bd(mod\ n)。\\
(m^{\phi(n)})^h\times m \equiv m \times1^h \pmod n \\
m^{h\phi(n)+1} \equiv m \pmod n\\
证明完成
$$
</div>
<p>如果 m 和 n 不互质</p>
<div>
$$
\because n = pq\ (质因子)\\\therefore 必然有\ m = kp\ 或\ m=kq\ (公因子只能是p或q)\\以\ m=kp\ 为例，kp与q必然互质,p为质数\\根据欧拉定理\ (kp)^{q-1} \equiv 1 \pmod q \ (自己多次乘上自己，再两边同时乘kp)\\进一步得到\ [(kp)^{q-1}]^{h(p-1)} \times kp \equiv kp \pmod q\\\because ed = h\phi(n) +1 \\化简\ (kp)^{ed} \equiv kp \pmod q\\改写成\ (kp)^{ed} = kp + tq\\这时t必然能被p整除,即\ t=t'p\ (因为(kp)^{ed}一定是p的整倍数)\\(kp)^{ed} = kp+t'pq\\\because m=kp, n=pq\\\therefore m^{ed}=m+t'n\\\therefore m^{ed} \equiv m \pmod n\\证明完成
$$
</div>
]]></description>
</item><item>
    <title>使用github page和CI(github action)创建博客</title>
    <link>https://www.kirito41dd.cn/blog-with-gitpage-and-ci/</link>
    <pubDate>Sun, 01 Nov 2020 14:43:41 &#43;0800</pubDate>
    <author>kirito</author>
    <guid>https://www.kirito41dd.cn/blog-with-gitpage-and-ci/</guid>
    <description><![CDATA[<h2 id="这个博客是怎么来的">这个博客是怎么来的</h2>
<p>问就是白嫖github page，白嫖太爽了(</p>
<p>静态博客的生成器使用的是<a href="https://www.gohugo.org/" target="_blank" rel="noopener noreffer">Hugo</a>、主题使用的<a href="https://hugoloveit.com/zh-cn/theme-documentation-basics/" target="_blank" rel="noopener noreffer">LoveIt</a>、评论系统使用<a href="https://disqus.com/" target="_blank" rel="noopener noreffer">Disqus</a>，LoveIt这个主题已经集成好了Disqus。</p>
<p>由于使用静态博客生成器，在每次改动后都需要重新运行一次生成命令，生成一大堆静态文件，再提交到gh-page，很麻烦。</p>
<p>为了让这个过程更加优雅，可以吧生成静态文件和部署这个过程放到CI里自动化完成。这里使用了github workflow的Action功能。</p>
<p>这样一来，只需要在本地编辑博客内容，然后push到github，就会自动触发CI流程，将生成的静态内容部署到<code>XXX.github.io</code>，也就是gh-page的仓库。</p>
<h2 id="准备工作">准备工作</h2>
<p>我一共新建了两个仓库：</p>
<ul>
<li><code>XXX.github.io</code>， gh-page仓库,由CI负责提交</li>
<li><code>blog</code>，存放博客文件</li>
</ul>
<p>主要工作是都在<code>blog</code>这个仓库上进行，另一个仓库是自动化操作的。</p>
<p><code>blog</code>存放了博客的主要骨架，还有一些脚本，方便在CI中做一些工作。</p>
<p><del>申请一个<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener noreffer">Github Application</a>，如果你想使用Gitalk代替Disqus</del></p>
<p>申请一个<a href="https://github.com/settings/tokens/new" target="_blank" rel="noopener noreffer">Personal access tokens</a>，CI流程中使用它来对<code>XXX.github.io</code>仓库进行提交，涉及到鉴权。</p>
<p>Github Application 和 Personal access tokens 都是需要保密的，不能直接写在配置文件里或这CI流程的脚本里。好在github的Workflow提供了在CI中访问仓库中配置的秘密环境变量的能力。</p>
<p>进入仓库-&gt;Settings-&gt;Secrets-&gt;new Secret，配置两个环境变量，如下：
</p>
<h2 id="杂项">杂项</h2>
<p>使用了腾讯的<a href="https://console.cloud.tencent.com/cos5/bucket" target="_blank" rel="noopener noreffer">对象存储</a>来存图片，可有可无。</p>
<p>一个域名，可有可无。</p>
<p>阿里云的CDN，可有可无。</p>
<h2 id="blog搭建过程">blog搭建过程</h2>
<p>首先看下我(本地)仓库的目录情况，<a href="https://github.com/kirito41dd/blog" target="_blank" rel="noopener noreffer">github地址</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sh" data-lang="sh">.
├── .github
│   └── workflows
│       └── main.yml <span class="c1"># github workflow 的action配置文件(CI脚本)</span>
├── .gitmodules <span class="c1"># git submodule 创建的，为了引入LoveIt</span>
├── README.md
├── bin <span class="c1"># 这个目录是脚本生成的，里面有hugo命令，不会被提交到仓库</span>
├── script
│   └── get-hugo.sh <span class="c1"># 本地 CI 都可以执行，用来获取hugo命令</span>
└── site <span class="c1"># 站点目录，存放hugo博客的骨架</span>
    ├── archetypes
    ├── config.toml
    ├── config.tomlconfig.toml
    ├── content <span class="c1"># 存放博客内容的地方</span>
    ├── data
    ├── layouts
    ├── public <span class="c1"># hugo生成的静态博客</span>
    ├── resources
    ├── static <span class="c1"># static 目录在生产静态文件时，会被拷贝到public</span>
    │   ├── .nojekyll <span class="c1"># 两个文件最终都会出现在gh-page仓库的根目录</span>
    │   └── CNAME <span class="c1"># 如过有域名需要这个</span>
    └── themes
        └── LoveIt <span class="c1"># submodule方式引入，LoveIt主题</span>
</code></pre></td></tr></table>
</div>
</div><p><code>.gitignore</code>忽略文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-text" data-lang="text">bin/
public/
</code></pre></td></tr></table>
</div>
</div><h3 id="骨架">骨架</h3>
<p>初始化git仓库后，首先编写了一个<a href="https://github.com/kirito41dd/blog/blob/main/script/get-hugo.sh" target="_blank" rel="noopener noreffer">脚本</a><code>script/get-hugo.sh</code>，这个脚本的功能是自动根据系统类型下载hugo,并解压到脚本所在位置的上级目录下的<code>bin</code>文件夹。脚本只支持mac或linux系统，CI也会用到这个脚本，windows用户可以手动安装。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 此脚本安装hugo到脚本所在位置的../bin目录</span>
<span class="nv">CURDIR</span><span class="o">=</span><span class="k">$(</span><span class="nb">cd</span> <span class="k">$(</span>dirname <span class="nv">$0</span><span class="k">)</span><span class="p">;</span> <span class="nb">pwd</span><span class="k">)</span>
<span class="nb">cd</span> <span class="nv">$CURDIR</span>
<span class="nb">echo</span> <span class="s2">&#34;执行目录 `pwd`&#34;</span>


<span class="c1"># 判断环境是mac还是linux,决定hugo版本</span>
<span class="k">if</span> <span class="o">[</span> <span class="k">$(</span>uname -s<span class="k">)</span> <span class="o">=</span> <span class="s1">&#39;Darwin&#39;</span> <span class="o">]</span><span class="p">;</span><span class="k">then</span>
    <span class="nb">echo</span> <span class="s1">&#39;当前环境为Darwin&#39;</span>
    <span class="nv">HUGOURL</span><span class="o">=</span><span class="s1">&#39;https://github.com/gohugoio/hugo/releases/download/v0.77.0/hugo_extended_0.77.0_macOS-64bit.tar.gz&#39;</span>
<span class="k">else</span>
    <span class="nb">echo</span> <span class="s1">&#39;当前环境为Linux&#39;</span>
    <span class="nv">HUGOURL</span><span class="o">=</span><span class="s1">&#39;https://github.com/gohugoio/hugo/releases/download/v0.77.0/hugo_extended_0.77.0_Linux-64bit.tar.gz&#39;</span>
<span class="k">fi</span>
<span class="nb">echo</span> <span class="s2">&#34;hugo 获取地址:</span><span class="nv">$HUGOURL</span><span class="s2">&#34;</span>

<span class="nb">echo</span> <span class="s1">&#39;开始下载&#39;</span>
curl -sSL -o hugo.tar.gz <span class="nv">$HUGOURL</span>
<span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> -ne <span class="m">0</span> <span class="o">]</span><span class="p">;</span><span class="k">then</span>
    <span class="nb">echo</span> <span class="s1">&#39;下载失败&#39;</span>
    <span class="nb">exit</span> <span class="m">1</span>
<span class="k">fi</span>

<span class="c1"># 解压文件</span>
<span class="nv">BINDIR</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$CURDIR</span><span class="s2">/../bin&#34;</span>
<span class="k">if</span> <span class="o">[</span> ! -d <span class="s2">&#34;</span><span class="nv">$BINDIR</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span><span class="k">then</span>
    mkdir <span class="nv">$CURDIR</span>/../bin
<span class="k">fi</span>
<span class="nb">echo</span> <span class="s2">&#34;解压到 </span><span class="nv">$BINDIR</span><span class="s2">&#34;</span>
tar -xzf ./hugo.tar.gz -C <span class="nv">$CURDIR</span>/../bin
rm ./hugo.tar.gz

<span class="c1"># 验证下解压安装成功</span>
<span class="nb">echo</span> <span class="s1">&#39;success&#39;</span>
<span class="nv">$BINDIR</span>/hugo version
</code></pre></td></tr></table>
</div>
</div><p>执行<code>sh scrpit/get-hugo.sh</code>，就可以使用hugo了，执行<code>bin/hugo vesion</code>打印hugo版本。</p>
<p>然后创建站点，执行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sh" data-lang="sh">bin/hugo new site .
</code></pre></td></tr></table>
</div>
</div><p>生成site目录。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sh" data-lang="sh">tree ./site
.
├── archetypes
├── config.toml <span class="c1"># 配置文件</span>
├── content
├── data
├── layouts
├── static
└── themes <span class="c1"># 主题文件夹</span>
</code></pre></td></tr></table>
</div>
</div><p>下一步拉取主题，我使用的是<a href="https://hugoloveit.com/zh-cn/theme-documentation-basics/" target="_blank" rel="noopener noreffer">LoveIt</a>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sh" data-lang="sh"><span class="c1"># 在site目录执行</span>
git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt

<span class="c1"># 注意有了submodules后，再从别的地方拉取仓库记得</span>
<span class="c1"># git submodule init</span>
<span class="c1"># git submodule update</span>
</code></pre></td></tr></table>
</div>
</div><p>参考<a href="https://hugoloveit.com/zh-cn/theme-documentation-basics/" target="_blank" rel="noopener noreffer">LoveIt</a>的文档，配置好<code>config.toml</code>文件</p>
<p>我的<a href="https://github.com/kirito41dd/blog/blob/main/site/config.toml" target="_blank" rel="noopener noreffer">配置</a>中需要说明的只有下面几行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-toml" data-lang="toml"><span class="c">#  评论系统设置</span>
<span class="p">[</span><span class="nx">params</span><span class="p">.</span><span class="nx">page</span><span class="p">.</span><span class="nx">comment</span><span class="p">]</span>
  <span class="nx">enable</span> <span class="p">=</span> <span class="kc">true</span>
  <span class="c"># Disqus 评论系统设置</span>
  <span class="p">[</span><span class="nx">params</span><span class="p">.</span><span class="nx">page</span><span class="p">.</span><span class="nx">comment</span><span class="p">.</span><span class="nx">disqus</span><span class="p">]</span>
    <span class="nx">enable</span> <span class="p">=</span> <span class="kc">true</span>
    <span class="c"># Disqus 的 shortname</span>
    <span class="nx">shortname</span> <span class="p">=</span> <span class="s2">&#34;kirito-blog&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>这是Disqus的配置，很简单。</p>
<p>博客编写的部分请直接去看hugo的<a href="https://www.gohugo.org/" target="_blank" rel="noopener noreffer">文档</a></p>
<p>博客有内容后，本地看效果使用下面命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sh" data-lang="sh"><span class="nb">cd</span> site
<span class="c1"># 本地预览（不会展示gitalk）</span>
../bin/hugo server
<span class="c1"># 本地预览，但是使用生产环境(会展示gitalk，但不建议)</span>
../bin/hugo server -e production
</code></pre></td></tr></table>
</div>
</div><p>hugo生成静态站点的方式是直接在site目录执行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sh" data-lang="sh">../bin/hugo
</code></pre></td></tr></table>
</div>
</div><p>完成后将生成<code>public</code>文件夹，注意不要提交到仓库中。</p>
<p>下面把生成的静态站点，提交到gh-page仓库，就能展示博客了，当然也可以使用其他静态托管服务。</p>
<h3 id="配置ci部署">配置CI部署</h3>
<p>回到仓库根目录，创建Action文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sh" data-lang="sh">mkdir -p .github/workflows
touch .github/workflows/main.yml
</code></pre></td></tr></table>
</div>
</div><p>CI配置参考<a href="https://docs.github.com/en/actions/quickstart" target="_blank" rel="noopener noreffer">文档</a></p>
<p>我的<a href="https://github.com/kirito41dd/blog/blob/main/.github/workflows/main.yml" target="_blank" rel="noopener noreffer">CI配置</a>中需要说明的几行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yml" data-lang="yml">- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">init blog</span><span class="w">
</span><span class="w">  </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">    git submodule init 
</span><span class="sd">    git submodule update
</span><span class="sd">    sh script/get-hugo.sh
</span><span class="sd">    cd site
</span><span class="sd">    ../bin/hugo</span><span class="w">    
</span><span class="w">
</span><span class="w"></span><span class="c"># 部署blog</span><span class="w">
</span><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">deploy blog</span><span class="w">
</span><span class="w">  </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">GITHUB_REPO</span><span class="p">:</span><span class="w"> </span><span class="l">github.com/zshorz/zshorz.github.io</span><span class="w">
</span><span class="w">  </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">    cd site/public
</span><span class="sd">    git init &amp;&amp; git add .
</span><span class="sd">    git config user.name &#34;xxxx&#34;
</span><span class="sd">    git config user.email &#34;xxxx@mail.com&#34;
</span><span class="sd">    git commit -m &#34;GitHub Actions Auto Builder at $(date +&#39;%Y-%m-%d %H:%M:%S&#39;)&#34;
</span><span class="sd">    git push --force --quiet &#34;https://${{ secrets.ACCESS_TOKEN }}@$GITHUB_REPO&#34; master:master</span><span class="w">    
</span></code></pre></td></tr></table>
</div>
</div><p>还记得在仓库中配置了secret环境变量，而在CI中访问那些环境变量的方法就是<code>${{secrets.NAME}}</code></p>
<p>CI的脚本有两部分，首先初始化blog，然后将生成的静态网站，部署到<code>xxx.github.io</code></p>
<p>我把脚本抽出来单独注释（注意这是在CI的docker自动执行的，不是本地环境）</p>
<p>第一部分</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 初始化submodule，拉取LoveIt主题</span>
git submodule init 
git submodule update
<span class="c1"># 执行脚本安装hugo环境</span>
sh script/get-hugo.sh
<span class="nb">cd</span> site
<span class="c1"># 生成站点，输出到public目录</span>
../bin/hugo
</code></pre></td></tr></table>
</div>
</div><p>第二部分</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 进入生成的静态站点目录</span>
<span class="nb">cd</span> site/public
<span class="c1"># 初始化为git仓库</span>
git init <span class="o">&amp;&amp;</span> git add .
git config user.name <span class="s2">&#34;xxxx&#34;</span>
git config user.email <span class="s2">&#34;xxxx@qq.com&#34;</span>
<span class="c1"># 本地提交</span>
git commit -m <span class="s2">&#34;GitHub Actions Auto Builder at </span><span class="k">$(</span>date +<span class="s1">&#39;%Y-%m-%d %H:%M:%S&#39;</span><span class="k">)</span><span class="s2">&#34;</span>
<span class="c1"># 强制推送到远端仓库</span>
git push --force --quiet <span class="s2">&#34;https://</span><span class="si">${</span><span class="p">{ secrets.ACCESS_TOKEN </span><span class="si">}</span><span class="s2">}@</span><span class="nv">$GITHUB_REPO</span><span class="s2">&#34;</span> master:master
</code></pre></td></tr></table>
</div>
</div><p>到此CI就配置好了。</p>
<h3 id="push仓库">push仓库</h3>
<p>直接将你的仓库push到远端，会自动触发CI，你可以在这里查看执行情况
</p>
<p>待CI执行成功后，打开在浏览器中输入<code>xxx.github.io</code>查看博客站点，就是你现在看到的样子了。</p>
<h2 id="可选项目">可选项目</h2>
<h3 id="配置域名">配置域名</h3>
<p>比如域名是<code>kirito41dd.cn</code>，你想当你访问<code>www.kirito41dd.cn</code>的时候，就是你的博客站点。</p>
<p>添加文件<code>site/static/CNAME</code>，在里面写上<code>www.kirito41dd.cn</code>，push让CI再次构建</p>
<p>然后打开你的域名控制台，为<code>www.kirito41dd.cn</code>添加一个CNAME记录，记录值为<code>xxx.github.io</code></p>
<p>稍后浏览器输入域名网址，你就又看到这个页面了</p>
<h3 id="cdn加速">CDN加速</h3>
<p>我用的阿里云的cdn，不知道为啥还没收我钱(</p>
<h2 id="最后">最后</h2>
<p>git push 享受下 CI 部署的丝滑(</p>
]]></description>
</item><item>
    <title>2020春招记录</title>
    <link>https://www.kirito41dd.cn/2020-spring-recruits/</link>
    <pubDate>Sat, 30 May 2020 15:59:45 &#43;0800</pubDate>
    <author>kirito</author>
    <guid>https://www.kirito41dd.cn/2020-spring-recruits/</guid>
    <description><![CDATA[<p>简单记录下自己的2020春招</p>
<p>2021届双非网络工程，拿过几个水奖，成绩中上。目前拿到了字节跳动的实习offer，其余的进度都很悲观。写这些之前都处于极度自闭状态，好在字节跳动已经尘埃落定，重新拾起精神。</p>
<p>因为只有字节跳动走完了所有流程，所以就主要记录下字节跳动的面试经历。由于没有考研打算，很早就用学长的内推码投了暑期实习生的一个后端岗位，但简历一直是评估中，后来学长说让我试试投其他岗位，又投了一个后端开发。在简历评估中的这段时间，我除了字节和阿里以外没有投其他简历，投这俩是因为有学长内推。我是没想到简历评估了两个月。。。感觉实在不行了，开始海投，这时候已经4月下旬了。。。</p>
<h2 id="字节">字节</h2>
<p>字节跳动的面试体验还是不错的：</p>
<p>4.23日 一面·技术面·1小时</p>
<ul>
<li>
<p>问了问简历里写的项目相关</p>
</li>
<li>
<p>网络相关，tcp，udp, tcp拥塞控制</p>
</li>
<li>
<p>对http的了解，还问了http头里面的字段，cookie和session区别什么的</p>
</li>
<li>
<p>进程间通讯</p>
</li>
<li>
<p>死锁</p>
</li>
<li>
<p>最长连续子序列，最长子序列(代码题 普通的dp 当时没说清是否连续，俩都写了，就改改转移方程就行了)</p>
</li>
<li>
<p>链表找环(代码题 要求空间复杂度为1，就是不让记录访问过的状态，当时不知道咋写，后来问同学，双指针)</p>
</li>
<li>
<p>二叉查找树(平衡树，红黑树，我忘记是不是在这里问的了，记不清了)</p>
</li>
<li>
<p>聊天</p>
</li>
<li>
<p>可以问面试官一个问题（我问了下一面面啥，白问）</p>
</li>
</ul>
<p>4.23日 二面·技术面·1小时</p>
<ul>
<li>问简历项目</li>
<li>问我以后的职业规划，问我为啥不考研(本来就没有计划考研，又因为保研没我啥事，除非天上掉下来个研究生，我考虑考虑 雾)</li>
<li>大数加法(代码题 还是挺简单的)</li>
<li>问我下楼梯问题(题还没描述完我就知道是递推了，当时我们acm学长宣讲例题就是这种。。。我反手给面试官推荐了这种Fibonacci类的递推怎么用矩阵快速幂来恶心别人，哈哈，聊的挺high，也没让我再写代码了)</li>
<li>计算机，网络相关题，记不清了，这场聊的比较轻松，没记住（后来我ld说这场她旁听了）</li>
<li>linux命令问了几个，inode，硬链软链什么的</li>
<li>非对称加密的了解，https、ssl握手机制(网络安全课上刚学完这部分，甚至我们反转课堂我就负责的rsa这部分，反手一个超级加倍，哈哈，欧拉定理，永远滴神)</li>
<li>让我聊聊比赛场景(引起了我对我们三人赛场上被中学生虐飞的悲惨回忆)</li>
<li>说支持云入职(我说后面没有了？他说有。。。让我白高兴)</li>
<li>可以问面试官一个问题（我又问了下一面面啥，白问）</li>
</ul>
<p>4.28日 三面·技术交叉面·1小时</p>
<ul>
<li>基础题忘记了（当时面完让我等通知，我以为凉了，也没心情记）</li>
<li>求二叉树深度(代码题，直接dfs找最深没再问了)</li>
<li>打印集合子集(代码题，回溯遍历)</li>
<li>排序算法了解啥(说了常用排序算法，问我快速排序时间复杂度，最坏情况呢？大概知道要问啥，说了随机选取哨兵，避开恶意数据)</li>
<li>malloc的一些问题，他写代码我来看</li>
<li>malloc free new delete 区别</li>
<li>什么是内存泄漏，如何防止(举了几个例子，还回答了share_ptr 又问会有什么问题？ 循环引用 weak_ptr配合 )</li>
<li>可以问面试官一个问题（问了点工作细节相关）</li>
</ul>
<p>4.28日 四面·技术面·1小时</p>
<ul>
<li>用c写个字符串拼接(三面完让我等通知以为凉了，面完一会四面面试官就给我打电话问我人去哪了，来房间面试)</li>
<li>设计一个多线程下的异步日志打印</li>
<li>linux c内存空间布局</li>
<li>linux线程从创建到运行，进程，线程，协程区别（协程看过腾讯的libco，还特意扯了点它是如何汇编切换上下文，以及hook系统调用的）</li>
<li>问项目细节(中途延申，聊了聊比特币，linux2.6新加入的timerfd、eventfd、signalfd如何如何方便，socks5握手协议)</li>
<li>聊天，也是技术相关，没记住</li>
</ul>
<p>时间忘了 hr面</p>
<ul>
<li>给我介绍部门相关</li>
<li>闲聊，学校，经历，为什么选这个专业</li>
<li>acm收获</li>
<li>缺点 优点</li>
<li>入职时间</li>
</ul>
<p>一面二面是连着面，三面四面也是连着面，期间一面完等二面面试官的时候，接到了阿里的面试电话，说在面试推到隔天了。</p>
<p>四面结束我ld就微信联系我了，聊了聊，五一假期放假，等的可煎熬，假期结束就收到实习offer了。</p>
<p>字节说完了，说说自闭的</p>
<h2 id="其他">其他</h2>
<ul>
<li>阿里电话面试挂了，基础题都答上来了，从比特币聊到分布式一致性，只知道比特币是工作量证明和hash，其他方面不了解。还问了我为啥简历偏c++却投了java岗，数据库隔离级别，当时对脏读幻读什么的有概念，但是问我怎么实现的，这里没准备，答不上来(问问b树啥的不就行了吗，没想到还会有这个，后来问同学说好多面经有，后悔没多看看)，一通电话给人整自闭了。</li>
<li>腾讯投了，也笔试了，后续没动静</li>
<li>百度投了，没动静</li>
<li>网易雷火，笔试了，没动静</li>
<li>EA,笔试了，没动静，后来给我打电话了，但是我已经接了字节的offer了，面试就拒了</li>
<li>美团，通知笔试</li>
<li>西山居，笔试了，没动静</li>
<li>途游，笔试了，没动静</li>
<li>快手京东，投了，没动静</li>
</ul>
<p>可能都太晚了，极度自闭。。。</p>
<p>5.29日 奇虎360 一面·技术面·1小时</p>
<ul>
<li>c/c++区别，类，多态，继承，重载，重写，隐藏，const，mutable</li>
<li>重要成员函数（构造，拷贝，移动，析构）</li>
<li>c++11新特性，lambda（如何实现)，auto，右值，move，forward</li>
<li>tcp握手，挥手(详细状态，如timewait），拥塞控制</li>
<li>osi七层协议，ip,icmp等，掩码与子网划分</li>
<li>进程状态，进程间通信，线程，协程，进程间通讯，各种锁（把APUE里的都答上）</li>
<li>字节序，IO多路复用，网络API（问linux的c函数，就是看有没有用过）</li>
<li>shared_prt如何实现</li>
<li>acm比赛回忆（感觉就是凑时长）</li>
<li>聊很开心，真就互相练手呗</li>
</ul>
]]></description>
</item></channel>
</rss>
